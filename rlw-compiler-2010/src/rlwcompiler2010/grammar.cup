package rlwcompiler2010;

import java_cup.runtime.*;

/* Terminals */
terminal ASSIGNMENTSYMBOL, BY, COMMA, COMPARATOR, CONSTANT, ELSE, IDENTIFIER, IF, LBRACKET, LCURLY, MINUS, PLUS, RBRACKET, RCURLY, SEMICOLON, TIMES, TYPE, PRINT, FOR;

/* Non terminals */
non terminal program, assignment, block, declaration, declarations, expresion, factor, identifiers, predicate, print, scope, selection, statement, statements, term, firstlevelstatement, firstlevelstatements, loop, loopstart, loopcheck, loopafter, sconstant;


program ::= declarations firstlevelstatements {: Logger.get().logDebug("Parser", "Using rule: program ::= declarations firstlevelstatements"); ParserHelper.get().program(); :}
        | firstlevelstatements {: Logger.get().logDebug("Parser", "Using rule: program ::= firstlevelstatements"); ParserHelper.get().program(); :}
	;

declarations ::= declarations declaration {: Logger.get().logDebug("Parser", "Using rule: declarations ::= declarations declaration"); :}
        | declaration {: Logger.get().logDebug("Parser", "Using rule: declarations ::= declaration"); :}
	;

declaration ::= TYPE:t identifiers SEMICOLON {: Logger.get().logDebug("Parser", "Using rule: declaration ::= TYPE identifiers SEMICOLON"); ParserHelper.get().declaration(t.toString()); :}
	;

firstlevelstatements ::= firstlevelstatements firstlevelstatement {: Logger.get().logDebug("Parser", "Using rule: firstlevelstatements ::= firstlevelstatements firstlevelstatement"); :}
        | firstlevelstatement {: Logger.get().logDebug("Parser", "Using rule: firstlevelstatements ::= firstlevelstatement"); :}
	;

firstlevelstatement ::= LCURLY scope RCURLY {: Logger.get().logDebug("Parser", "Using rule: firstlevelstatement ::= LCURLY scope RCURLY"); :}
        | statement{: Logger.get().logDebug("Parser", "Using rule: firstlevelstatement ::= statement"); :}
	;

scope ::= declarations statements {: Logger.get().logDebug("Parser", "Using rule: scope ::= declarations statements"); :}
        | /*statements {: Logger.get().logDebug("Parser", "Using rule: scope ::= statements"); :}*/
	;

statements ::= statements statement {: Logger.get().logDebug("Parser", "Using rule: statements ::= statements statement"); :}
        | statement {: Logger.get().logDebug("Parser", "Using rule: statements ::= statement"); :}
	;

identifiers ::= identifiers COMMA IDENTIFIER:id {: Logger.get().logDebug("Parser", "Using rule: identifiers ::= identifiers COMMA IDENTIFIER"); ParserHelper.get().identifier(id.toString()); :}
        | IDENTIFIER:id {: Logger.get().logDebug("Parser", "Using rule: identifiers ::= IDENTIFIER"); ParserHelper.get().identifier(id.toString()); :}
	;

statement ::= assignment {: Logger.get().logDebug("Parser", "Using rule: statement ::= assignment"); :}
        | selection {: Logger.get().logDebug("Parser", "Using rule: statement ::= selection"); :}
        | print {: Logger.get().logDebug("Parser", "Using rule: statement ::= print"); :}
	| loop {: Logger.get().logDebug("Parser", "Using rule: statement ::= loop"); :}
	;

assignment ::= IDENTIFIER:id ASSIGNMENTSYMBOL expresion SEMICOLON {: Logger.get().logDebug("Parser", "Using rule: assignment ::= IDENTIFIER ASSIGNMENTSYMBOL expresion SEMICOLON"); ParserHelper.get().assignTo(id.toString()); :}
	;

expresion ::= expresion PLUS term {: Logger.get().logDebug("Parser", "Using rule: expresion ::= expresion PLUS term"); ParserHelper.get().operator("ADD"); :}
        | expresion MINUS term {: Logger.get().logDebug("Parser", "Using rule: expresion ::= expresion MINUS term"); ParserHelper.get().operator("SUB"); :}
        | term {: Logger.get().logDebug("Parser", "Using rule: expresion ::= term"); :}
	;

term ::= term TIMES factor {: Logger.get().logDebug("Parser", "Using rule: term ::= term TIMES factor"); ParserHelper.get().operator("MUL"); :}
        | term BY factor {: Logger.get().logDebug("Parser", "Using rule: term ::= term BY factor"); ParserHelper.get().operator("DIV"); :}
        | factor {: Logger.get().logDebug("Parser", "Using rule: term ::= factor"); :}
	;

factor ::= IDENTIFIER:i {: Logger.get().logDebug("Parser", "Using rule: factor ::= IDENTIFIER"); ParserHelper.get().operand(i.toString()); :}
        | sconstant {: Logger.get().logDebug("Parser", "Using rule: factor ::= sconstant"); :}
	;

selection ::= IF LBRACKET predicate RBRACKET block ELSE block {: Logger.get().logDebug("Parser", "Using rule: selection ::= IF LBRACKET predicate RBRACKET block ELSE block"); :}
	;

block ::= statement {: Logger.get().logDebug("Parser", "Using rule: block ::= statement"); :}
        | LCURLY statements RCURLY {: Logger.get().logDebug("Parser", "Using rule: block ::= LCURLY statements RCURLY"); ParserHelper.get().multiStatementBlockClosed(); :}
	;

predicate ::= expresion COMPARATOR:c expresion {: Logger.get().logDebug("Parser", "Using rule: predicate ::= expresion COMPARATOR expresion"); ParserHelper.get().comparator(c.toString()); :}
	;

print ::= PRINT LBRACKET sconstant RBRACKET SEMICOLON {: Logger.get().logDebug("Parser", "Using rule: print ::= PRINT LBRACKET sconstant RBRACKET SEMICOLON"); ParserHelper.get().operator("PRN"); :}
	;

loop ::= FOR LBRACKET loopstart SEMICOLON loopcheck SEMICOLON loopafter RBRACKET block {: Logger.get().logDebug("Parser", "Using rule: loop ::= FOR LBRACKET loopstart SEMICOLON loopcheck SEMICOLON loopafter RBRACKET block"); :}
	;

loopstart ::= IDENTIFIER ASSIGNMENTSYMBOL IDENTIFIER {: Logger.get().logDebug("Parser", "Using rule: loopstart ::= IDENTIFIER ASSIGNMENTSYMBOL IDENTIFIER"); :}
	| IDENTIFIER ASSIGNMENTSYMBOL sconstant {: Logger.get().logDebug("Parser", "Using rule: loopstart ::= IDENTIFIER ASSIGNMENTSYMBOL sconstant"); :}
	;

loopcheck ::= IDENTIFIER COMPARATOR IDENTIFIER {: Logger.get().logDebug("Parser", "Using rule: loopcheck ::= IDENTIFIER COMPARATOR IDENTIFIER"); :}
	| IDENTIFIER COMPARATOR sconstant {: Logger.get().logDebug("Parser", "Using rule: loopcheck ::= IDENTIFIER COMPARATOR sconstant"); :}
	;

loopafter ::= IDENTIFIER {: Logger.get().logDebug("Parser", "Using rule: loopafter ::= IDENTIFIER"); :}
	| sconstant {: Logger.get().logDebug("Parser", "Using rule: loopafter ::= sconstant"); :}
	;

sconstant ::= MINUS CONSTANT:c {: Logger.get().logDebug("Parser", "Using rule: sconstant ::= MINUS CONSTANT"); ParserHelper.get().unaryMinus(c.toString()); :}
        | CONSTANT:c {: Logger.get().logDebug("Parser", "Using rule: sconstant ::= CONSTANT"); ParserHelper.get().operand(c.toString()); :}
        ;

/* Error recovery productions */
statement ::= error SEMICOLON {: Logger.get().logDebug("Parser", "Using ERROR rule: statement ::= error SEMICOLON"); :}
        | LCURLY error RCURLY {: Logger.get().logDebug("Parser", "Using ERROR rule: statement ::= LCURLY error RCURLY"); :}
        ;