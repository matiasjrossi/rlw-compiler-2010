
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 16 03:25:48 ART 2010
//----------------------------------------------------

package rlwcompiler2010;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 16 03:25:48 ART 2010
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\006\004\000\002\006\003\000\002\005\005" +
    "\000\002\022\004\000\002\022\003\000\002\021\005\000" +
    "\002\021\003\000\002\014\006\000\002\014\003\000\002" +
    "\033\002\000\002\034\002\000\002\017\004\000\002\017" +
    "\003\000\002\011\005\000\002\011\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\003\006\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\003\000\002\010\003\000\002\010\003\000\002\015\015" +
    "\000\002\035\002\000\002\030\002\000\002\031\002\000" +
    "\002\032\002\000\002\004\003\000\002\004\005\000\002" +
    "\012\005\000\002\013\007\000\002\023\014\000\002\036" +
    "\002\000\002\024\005\000\002\024\005\000\002\025\005" +
    "\000\002\025\005\000\002\026\003\000\002\026\003\000" +
    "\002\027\004\000\002\027\003\000\002\016\004\000\002" +
    "\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\020\003\016\012\020\013\uffe1\015\023\024" +
    "\012\025\017\026\uffd8\001\002\000\024\002\uffed\003\uffed" +
    "\011\uffed\012\uffed\013\uffed\015\uffed\021\uffed\025\uffed\026" +
    "\uffed\001\002\000\024\002\uffef\003\uffef\011\uffef\012\uffef" +
    "\013\uffef\015\uffef\021\uffef\025\uffef\026\uffef\001\002\000" +
    "\020\003\ufffd\012\ufffd\013\ufffd\015\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\001\002\000\004\002\145\001\002\000\024\002" +
    "\uffec\003\uffec\011\uffec\012\uffec\013\uffec\015\uffec\021\uffec" +
    "\025\uffec\026\uffec\001\002\000\004\013\130\001\002\000" +
    "\004\012\124\001\002\000\020\002\ufff8\003\ufff8\012\ufff8" +
    "\013\ufff8\015\ufff8\025\ufff8\026\ufff8\001\002\000\020\002" +
    "\uffff\003\016\012\020\013\uffe1\015\023\025\017\026\uffd8" +
    "\001\002\000\004\026\074\001\002\000\004\022\045\001" +
    "\002\000\004\014\070\001\002\000\004\004\046\001\002" +
    "\000\020\002\ufffa\003\ufffa\012\ufffa\013\ufffa\015\ufffa\025" +
    "\ufffa\026\ufffa\001\002\000\024\002\uffee\003\uffee\011\uffee" +
    "\012\uffee\013\uffee\015\uffee\021\uffee\025\uffee\026\uffee\001" +
    "\002\000\020\003\032\012\020\013\uffe1\015\033\024\ufff5" +
    "\025\017\026\uffd8\001\002\000\020\003\016\012\020\013" +
    "\uffe1\015\023\024\012\025\017\026\uffd8\001\002\000\020" +
    "\003\ufffe\012\ufffe\013\ufffe\015\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\001\002\000\020\002\001\003\016\012\020\013\uffe1" +
    "\015\023\025\017\026\uffd8\001\002\000\020\002\ufffb\003" +
    "\ufffb\012\ufffb\013\ufffb\015\ufffb\025\ufffb\026\ufffb\001\002" +
    "\000\020\003\016\012\020\013\uffe1\015\033\021\ufff6\025" +
    "\017\026\uffd8\001\002\000\020\003\ufff2\012\ufff2\013\ufff2" +
    "\015\ufff2\021\ufff2\025\ufff2\026\ufff2\001\002\000\006\021" +
    "\044\022\045\001\002\000\004\003\043\001\002\000\004" +
    "\024\012\001\002\000\004\021\036\001\002\000\020\002" +
    "\ufff9\003\ufff9\012\ufff9\013\ufff9\015\ufff9\025\ufff9\026\ufff9" +
    "\001\002\000\020\003\016\012\020\013\uffe1\015\033\024" +
    "\012\025\017\026\uffd8\001\002\000\020\003\016\012\020" +
    "\013\uffe1\015\033\021\ufff4\025\017\026\uffd8\001\002\000" +
    "\004\021\ufff7\001\002\000\020\003\ufff3\012\ufff3\013\ufff3" +
    "\015\ufff3\021\ufff3\025\ufff3\026\ufff3\001\002\000\004\021" +
    "\044\001\002\000\024\002\uffce\003\uffce\011\uffce\012\uffce" +
    "\013\uffce\015\uffce\021\uffce\025\uffce\026\uffce\001\002\000" +
    "\024\002\uffcf\003\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf" +
    "\021\uffcf\025\uffcf\026\uffcf\001\002\000\010\010\047\012" +
    "\053\016\054\001\002\000\020\005\uffd0\007\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\022\uffd0\023\uffd0\001\002\000\020\005" +
    "\uffe3\007\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3" +
    "\001\002\000\020\005\063\007\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\022\uffe8\023\062\001\002\000\020\005\uffe5\007\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\001\002\000" +
    "\020\005\uffe4\007\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4" +
    "\023\uffe4\001\002\000\004\010\067\001\002\000\010\016" +
    "\060\017\057\022\056\001\002\000\024\002\uffeb\003\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\015\uffeb\021\uffeb\025\uffeb\026" +
    "\uffeb\001\002\000\010\010\047\012\053\016\054\001\002" +
    "\000\010\010\047\012\053\016\054\001\002\000\020\005" +
    "\063\007\uffe9\016\uffe9\017\uffe9\020\uffe9\022\uffe9\023\062" +
    "\001\002\000\010\010\047\012\053\016\054\001\002\000" +
    "\010\010\047\012\053\016\054\001\002\000\020\005\uffe6" +
    "\007\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\001" +
    "\002\000\020\005\uffe7\007\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\022\uffe7\023\uffe7\001\002\000\020\005\063\007\uffea\016" +
    "\uffea\017\uffea\020\uffea\022\uffea\023\062\001\002\000\020" +
    "\005\uffd1\007\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023" +
    "\uffd1\001\002\000\006\010\047\016\054\001\002\000\004" +
    "\020\072\001\002\000\004\022\073\001\002\000\024\002" +
    "\uffda\003\uffda\011\uffda\012\uffda\013\uffda\015\uffda\021\uffda" +
    "\025\uffda\026\uffda\001\002\000\004\014\075\001\002\000" +
    "\004\012\076\001\002\000\004\004\120\001\002\000\004" +
    "\022\100\001\002\000\004\012\102\001\002\000\004\022" +
    "\106\001\002\000\004\007\103\001\002\000\010\010\047" +
    "\012\105\016\054\001\002\000\004\022\uffd4\001\002\000" +
    "\004\022\uffd5\001\002\000\010\010\047\012\110\016\054" +
    "\001\002\000\004\020\uffd2\001\002\000\004\020\uffd3\001" +
    "\002\000\004\020\112\001\002\000\016\003\016\012\020" +
    "\013\uffe1\015\115\025\017\026\uffd8\001\002\000\024\002" +
    "\uffd9\003\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\021\uffd9" +
    "\025\uffd9\026\uffd9\001\002\000\024\002\uffdd\003\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\015\uffdd\021\uffdd\025\uffdd\026\uffdd" +
    "\001\002\000\016\003\032\012\020\013\uffe1\015\033\025" +
    "\017\026\uffd8\001\002\000\020\003\016\012\020\013\uffe1" +
    "\015\033\021\117\025\017\026\uffd8\001\002\000\024\002" +
    "\uffdc\003\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\021\uffdc" +
    "\025\uffdc\026\uffdc\001\002\000\010\010\047\012\122\016" +
    "\054\001\002\000\004\022\uffd6\001\002\000\004\022\uffd7" +
    "\001\002\000\006\006\125\022\126\001\002\000\006\006" +
    "\ufff0\022\ufff0\001\002\000\004\012\127\001\002\000\020" +
    "\003\ufffc\012\ufffc\013\ufffc\015\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\001\002\000\006\006\ufff1\022\ufff1\001\002\000\004" +
    "\014\131\001\002\000\010\010\047\012\053\016\054\001" +
    "\002\000\004\020\136\001\002\000\010\007\134\016\060" +
    "\017\057\001\002\000\010\010\047\012\053\016\054\001" +
    "\002\000\010\016\060\017\057\020\uffdb\001\002\000\016" +
    "\003\uffe0\012\uffe0\013\uffe0\015\uffe0\025\uffe0\026\uffe0\001" +
    "\002\000\016\003\016\012\020\013\uffe1\015\115\025\017" +
    "\026\uffd8\001\002\000\004\011\141\001\002\000\016\003" +
    "\uffdf\012\uffdf\013\uffdf\015\uffdf\025\uffdf\026\uffdf\001\002" +
    "\000\016\003\016\012\020\013\uffe1\015\115\025\017\026" +
    "\uffd8\001\002\000\024\002\uffde\003\uffde\011\uffde\012\uffde" +
    "\013\uffde\015\uffde\021\uffde\025\uffde\026\uffde\001\002\000" +
    "\024\002\uffe2\003\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2" +
    "\021\uffe2\025\uffe2\026\uffe2\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\032\002\006\003\004\005\005\006\023\013" +
    "\003\015\021\016\012\021\020\022\013\023\007\035\010" +
    "\036\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\122\001\001\000\002\001\001\000" +
    "\022\003\004\013\003\015\021\016\012\021\026\023\007" +
    "\035\010\036\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\004\013\003\014\034\015" +
    "\021\016\030\017\027\023\007\033\033\035\010\036\014" +
    "\001\001\000\026\003\004\005\024\013\003\015\021\016" +
    "\012\021\020\022\025\023\007\035\010\036\014\001\001" +
    "\000\002\001\001\000\022\003\004\013\003\015\021\016" +
    "\012\021\026\023\007\035\010\036\014\001\001\000\002" +
    "\001\001\000\020\003\004\013\003\015\021\016\041\023" +
    "\007\035\010\036\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\005\006\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\004" +
    "\005\024\013\003\015\021\016\030\017\037\023\007\035" +
    "\010\036\014\001\001\000\022\003\004\013\003\015\021" +
    "\016\041\023\007\034\040\035\010\036\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\054\010\051\020" +
    "\050\027\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\051\020\065\027\047\001\001\000\010\010\051\020" +
    "\060\027\047\001\001\000\002\001\001\000\006\010\064" +
    "\027\047\001\001\000\006\010\063\027\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\110\027\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\004\004" +
    "\112\013\003\015\021\016\113\023\007\035\010\036\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\004\013\003\015\021\016\030\017\115\023\007\035\010" +
    "\036\014\001\001\000\020\003\004\013\003\015\021\016" +
    "\041\023\007\035\010\036\014\001\001\000\002\001\001" +
    "\000\004\027\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\132\010\051\012\131\020\050\027\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\134\010" +
    "\051\020\050\027\047\001\001\000\002\001\001\000\004" +
    "\030\136\001\001\000\022\003\004\004\137\013\003\015" +
    "\021\016\113\023\007\035\010\036\014\001\001\000\002" +
    "\001\001\000\004\031\141\001\001\000\022\003\004\004" +
    "\142\013\003\015\021\016\113\023\007\035\010\036\014" +
    "\001\001\000\004\032\143\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= LCURLY error RCURLY 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using ERROR rule: statement ::= LCURLY error RCURLY"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= error SEMICOLON 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using ERROR rule: statement ::= error SEMICOLON"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sconstant ::= CONSTANT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.get().logDebug("Parser", "Using rule: sconstant ::= CONSTANT"); ParserHelper.get().operand(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sconstant",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sconstant ::= MINUS CONSTANT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.get().logDebug("Parser", "Using rule: sconstant ::= MINUS CONSTANT"); ParserHelper.get().unaryMinus(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sconstant",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // loopafter ::= sconstant 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: loopafter ::= sconstant"); ParserHelper.get().loopAfter(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopafter",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // loopafter ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.get().logDebug("Parser", "Using rule: loopafter ::= IDENTIFIER"); ParserHelper.get().loopAfter(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopafter",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // loopcheck ::= IDENTIFIER COMPARATOR sconstant 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.get().logDebug("Parser", "Using rule: loopcheck ::= IDENTIFIER COMPARATOR sconstant"); ParserHelper.get().loopCheck(id.toString(), c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopcheck",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // loopcheck ::= IDENTIFIER COMPARATOR IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.get().logDebug("Parser", "Using rule: loopcheck ::= IDENTIFIER COMPARATOR IDENTIFIER"); ParserHelper.get().loopCheck(id.toString(), c.toString(), idexp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopcheck",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // loopstart ::= IDENTIFIER ASSIGNMENTSYMBOL sconstant 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.get().logDebug("Parser", "Using rule: loopstart ::= IDENTIFIER ASSIGNMENTSYMBOL sconstant"); ParserHelper.get().loopStart(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopstart",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // loopstart ::= IDENTIFIER ASSIGNMENTSYMBOL IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.get().logDebug("Parser", "Using rule: loopstart ::= IDENTIFIER ASSIGNMENTSYMBOL IDENTIFIER"); ParserHelper.get().loopStart(id.toString(), idexp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loopstart",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // prefor ::= 
            {
              Object RESULT =null;
		 ParserHelper.get().foR(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // loop ::= prefor FOR LBRACKET loopstart SEMICOLON loopcheck SEMICOLON loopafter RBRACKET block 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: loop ::= FOR LBRACKET loopstart SEMICOLON loopcheck SEMICOLON loopafter RBRACKET block"); ParserHelper.get().endFor(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // print ::= PRINT LBRACKET sconstant RBRACKET SEMICOLON 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: print ::= PRINT LBRACKET sconstant RBRACKET SEMICOLON"); ParserHelper.get().operator("PRN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // predicate ::= expresion COMPARATOR expresion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.get().logDebug("Parser", "Using rule: predicate ::= expresion COMPARATOR expresion"); ParserHelper.get().comparator(c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // block ::= LCURLY statements RCURLY 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: block ::= LCURLY statements RCURLY"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // block ::= statement 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: block ::= statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // endiflabel ::= 
            {
              Object RESULT =null;
		 ParserHelper.get().endifLabel(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endiflabel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elselabel ::= 
            {
              Object RESULT =null;
		 ParserHelper.get().elseLabel(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elselabel",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // then ::= 
            {
              Object RESULT =null;
		 ParserHelper.get().then(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("then",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // preif ::= 
            {
              Object RESULT =null;
		 ParserHelper.get().iF(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("preif",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // selection ::= preif IF LBRACKET predicate RBRACKET then block ELSE elselabel block endiflabel 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: selection ::= IF LBRACKET predicate RBRACKET block ELSE block"); ParserHelper.get().endIf(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= sconstant 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: factor ::= sconstant"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.get().logDebug("Parser", "Using rule: factor ::= IDENTIFIER"); ParserHelper.get().operand(i.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term ::= factor 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: term ::= factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= term BY factor 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: term ::= term BY factor"); ParserHelper.get().operator("DIV"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= term TIMES factor 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: term ::= term TIMES factor"); ParserHelper.get().operator("MUL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= term 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: expresion ::= term"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion MINUS term 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: expresion ::= expresion MINUS term"); ParserHelper.get().operator("SUB"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion PLUS term 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: expresion ::= expresion PLUS term"); ParserHelper.get().operator("ADD"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment ::= IDENTIFIER ASSIGNMENTSYMBOL expresion SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Logger.get().logDebug("Parser", "Using rule: assignment ::= IDENTIFIER ASSIGNMENTSYMBOL expresion SEMICOLON"); ParserHelper.get().assignTo(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= loop 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: statement ::= loop"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= print 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: statement ::= print"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= selection 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: statement ::= selection"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= assignment 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: statement ::= assignment"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // identifiers ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.get().logDebug("Parser", "Using rule: identifiers ::= IDENTIFIER"); ParserHelper.get().identifier(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // identifiers ::= identifiers COMMA IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.get().logDebug("Parser", "Using rule: identifiers ::= identifiers COMMA IDENTIFIER"); ParserHelper.get().identifier(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statements ::= statement 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: statements ::= statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statements ::= statements statement 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: statements ::= statements statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // scopeend ::= 
            {
              Object RESULT =null;
		 ParserHelper.get().scopeEnd(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scopeend",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // scopestart ::= 
            {
              Object RESULT =null;
		 ParserHelper.get().scopeStart(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scopestart",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // scope ::= statements 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: scope ::= statements"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // scope ::= scopestart declarations statements scopeend 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: scope ::= declarations statements"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // firstlevelstatement ::= statement 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: firstlevelstatement ::= statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("firstlevelstatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // firstlevelstatement ::= LCURLY scope RCURLY 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: firstlevelstatement ::= LCURLY scope RCURLY"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("firstlevelstatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // firstlevelstatements ::= firstlevelstatement 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: firstlevelstatements ::= firstlevelstatement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("firstlevelstatements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // firstlevelstatements ::= firstlevelstatements firstlevelstatement 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: firstlevelstatements ::= firstlevelstatements firstlevelstatement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("firstlevelstatements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= TYPE identifiers SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.get().logDebug("Parser", "Using rule: declaration ::= TYPE identifiers SEMICOLON"); ParserHelper.get().declaration(t.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declaration 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: declarations ::= declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations declaration 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: declarations ::= declarations declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= firstlevelstatements 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: program ::= firstlevelstatements"); ParserHelper.get().program(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarations firstlevelstatements 
            {
              Object RESULT =null;
		 Logger.get().logDebug("Parser", "Using rule: program ::= declarations firstlevelstatements"); ParserHelper.get().program(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

