
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 19 19:25:51 ART 2010
//----------------------------------------------------

package rlwcompiler2010;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 19 19:25:51 ART 2010
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\006\004\000\002\006\003\000\002\005\005" +
    "\000\002\022\005\000\002\022\004\000\002\021\005\000" +
    "\002\021\003\000\002\014\004\000\002\014\003\000\002" +
    "\017\005\000\002\017\004\000\002\011\005\000\002\011" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\003\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\010\003\000\002\010\003\000\002\015" +
    "\011\000\002\004\004\000\002\004\005\000\002\012\005" +
    "\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\014\012\015\013\010\015\020\024\011\025" +
    "\014\001\002\000\004\022\uffef\001\002\000\004\022\ufff1" +
    "\001\002\000\014\012\ufffd\013\ufffd\015\ufffd\024\ufffd\025" +
    "\ufffd\001\002\000\004\002\104\001\002\000\004\014\066" +
    "\001\002\000\004\012\062\001\002\000\004\022\ufff8\001" +
    "\002\000\014\002\uffff\012\015\013\010\015\020\025\014" +
    "\001\002\000\004\014\056\001\002\000\004\004\040\001" +
    "\002\000\004\022\037\001\002\000\004\022\ufff0\001\002" +
    "\000\012\012\015\013\010\024\011\025\014\001\002\000" +
    "\014\012\015\013\010\015\020\024\011\025\014\001\002" +
    "\000\014\012\ufffe\013\ufffe\015\ufffe\024\ufffe\025\ufffe\001" +
    "\002\000\014\002\001\012\015\013\010\015\020\025\014" +
    "\001\002\000\004\022\025\001\002\000\014\002\ufffb\012" +
    "\ufffb\013\ufffb\015\ufffb\025\ufffb\001\002\000\012\012\015" +
    "\013\010\021\ufff6\025\014\001\002\000\004\022\036\001" +
    "\002\000\004\021\035\001\002\000\012\012\015\013\010" +
    "\024\011\025\014\001\002\000\012\012\015\013\010\021" +
    "\ufff7\025\014\001\002\000\004\022\034\001\002\000\012" +
    "\012\ufff5\013\ufff5\021\ufff5\025\ufff5\001\002\000\004\022" +
    "\ufff9\001\002\000\012\012\ufff4\013\ufff4\021\ufff4\025\ufff4" +
    "\001\002\000\014\002\ufffa\012\ufffa\013\ufffa\015\ufffa\025" +
    "\ufffa\001\002\000\006\010\041\012\044\001\002\000\020" +
    "\005\uffe6\007\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\001\002\000\020\005\052\007\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\022\uffeb\023\051\001\002\000\020\005\uffe8\007" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\001\002" +
    "\000\020\005\uffe7\007\uffe7\016\uffe7\017\uffe7\020\uffe7\022" +
    "\uffe7\023\uffe7\001\002\000\010\016\047\017\046\022\uffee" +
    "\001\002\000\006\010\041\012\044\001\002\000\006\010" +
    "\041\012\044\001\002\000\020\005\052\007\uffec\016\uffec" +
    "\017\uffec\020\uffec\022\uffec\023\051\001\002\000\006\010" +
    "\041\012\044\001\002\000\006\010\041\012\044\001\002" +
    "\000\020\005\uffe9\007\uffe9\016\uffe9\017\uffe9\020\uffe9\022" +
    "\uffe9\023\uffe9\001\002\000\020\005\uffea\007\uffea\016\uffea" +
    "\017\uffea\020\uffea\022\uffea\023\uffea\001\002\000\020\005" +
    "\052\007\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023\051" +
    "\001\002\000\004\010\057\001\002\000\004\020\060\001" +
    "\002\000\004\022\uffe1\001\002\000\006\006\063\022\064" +
    "\001\002\000\006\006\ufff2\022\ufff2\001\002\000\004\012" +
    "\065\001\002\000\014\012\ufffc\013\ufffc\015\ufffc\024\ufffc" +
    "\025\ufffc\001\002\000\006\006\ufff3\022\ufff3\001\002\000" +
    "\006\010\041\012\044\001\002\000\004\020\073\001\002" +
    "\000\010\007\071\016\047\017\046\001\002\000\006\010" +
    "\041\012\044\001\002\000\010\016\047\017\046\020\uffe2" +
    "\001\002\000\012\012\015\013\010\015\076\025\014\001" +
    "\002\000\004\011\102\001\002\000\004\022\101\001\002" +
    "\000\010\012\015\013\010\025\014\001\002\000\012\012" +
    "\015\013\010\021\100\025\014\001\002\000\006\011\uffe3" +
    "\022\uffe3\001\002\000\006\011\uffe4\022\uffe4\001\002\000" +
    "\012\012\015\013\010\015\076\025\014\001\002\000\004" +
    "\022\uffe5\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\024\002\006\003\004\005\005\006\020\013" +
    "\003\015\016\016\011\021\015\022\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\060\001\001\000\002" +
    "\001\001\000\014\003\004\013\003\015\016\016\011\021" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\004\005\005\006" +
    "\030\013\003\014\027\015\016\016\026\017\025\001\001" +
    "\000\020\003\004\005\021\013\003\015\016\016\011\021" +
    "\015\022\022\001\001\000\002\001\001\000\014\003\004" +
    "\013\003\015\016\016\011\021\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\004\013\003\015\016" +
    "\016\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\004\005\021\013\003\015\016\016\026\017\031" +
    "\001\001\000\012\003\004\013\003\015\016\016\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\044\010" +
    "\042\020\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\042\020\054\001\001\000\006\010\042\020\047" +
    "\001\001\000\002\001\001\000\004\010\053\001\001\000" +
    "\004\010\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\067\010\042\012\066\020\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\071\010\042\020\041\001" +
    "\001\000\002\001\001\000\014\003\004\004\073\013\003" +
    "\015\016\016\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\004\013\003\015\016\016\026\017\076" +
    "\001\001\000\012\003\004\013\003\015\016\016\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\004" +
    "\004\102\013\003\015\016\016\074\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // print ::= PRINT LBRACKET CONSTANT RBRACKET 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: print ::= PRINT LBRACKET CONSTANT RBRACKET"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // predicate ::= expresion COMPARATOR expresion 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: predicate ::= expresion COMPARATOR expresion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // block ::= LCURLY statements RCURLY 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: block ::= LCURLY statements RCURLY"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // block ::= statement SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: block ::= statement SEMICOLON"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // selection ::= IF LBRACKET predicate RBRACKET block ELSE block 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: selection ::= IF LBRACKET predicate RBRACKET block ELSE block"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= CONSTANT 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: factor ::= CONSTANT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: factor ::= IDENTIFIER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= factor 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: term ::= factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= term BY factor 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: term ::= term BY factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // term ::= term TIMES factor 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: term ::= term TIMES factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= term 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: expresion ::= term"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion MINUS term 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: expresion ::= expresion MINUS term"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion PLUS term 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: expresion ::= expresion PLUS term"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignment ::= IDENTIFIER ASSIGNMENTSYMBOL expresion 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: assignment ::= IDENTIFIER ASSIGNMENTSYMBOL expresion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= print 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: statement ::= print"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= selection 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: statement ::= selection"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= assignment 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: statement ::= assignment"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // identifiers ::= IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: identifiers ::= IDENTIFIER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identifiers ::= identifiers COMMA IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: identifiers ::= identifiers COMMA IDENTIFIER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifiers",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statements ::= statement SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: statements ::= statement SEMICOLON"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statements ::= statements statement SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: statements ::= statements statement SEMICOLON"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // scope ::= statements 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: scope ::= statements"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // scope ::= declarations statements 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: scope ::= declarations statements"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // firstlevelstatement ::= statement 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: firstlevelstatement ::= statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("firstlevelstatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // firstlevelstatement ::= LCURLY scope RCURLY 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: firstlevelstatement ::= LCURLY scope RCURLY"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("firstlevelstatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // firstlevelstatements ::= firstlevelstatement SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: firstlevelstatements ::= firstlevelstatement SEMICOLON"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("firstlevelstatements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // firstlevelstatements ::= firstlevelstatements firstlevelstatement SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: firstlevelstatements ::= firstlevelstatements firstlevelstatement SEMICOLON"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("firstlevelstatements",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= TYPE identifiers SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: declaration ::= TYPE identifiers SEMICOLON"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declaration 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: declarations ::= declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations declaration 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: declarations ::= declarations declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= firstlevelstatements 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: program ::= firstlevelstatements"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarations firstlevelstatements 
            {
              Object RESULT =null;
		 System.out.println("Parser:: Using rule: program ::= declarations firstlevelstatements"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

